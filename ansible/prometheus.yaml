apiVersion: v1
kind: Template
metadata:
  name: prometheus
parameters:
- description: The namespace to instantiate prometheus under. Defaults to 'default'.
  name: NAMESPACE
  value: default
objects:
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: prometheus
    namespace: "${NAMESPACE}"
- apiVersion: v1
  kind: ClusterRoleBinding
  metadata:
    name: prometheus-cluster-reader
  roleRef:
    name: cluster-reader
  subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: "${NAMESPACE}"
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      name: prometheus
    name: prometheus
    namespace: "${NAMESPACE}"
  spec:
    ports:
    - name: prometheus
      port: 80
      protocol: TCP
      targetPort: 9090
    selector:
      app: prometheus
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      prometheus.io/scrape: "true"
    labels:
      name: alertmanager
    name: alertmanager
    namespace: "${NAMESPACE}"
  spec:
    ports:
    - name: alertmanager
      port: 9093
      protocol: TCP
      targetPort: 9093
    selector:
      app: prometheus
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      name: message-buffer
    name: message-buffer
    namespace: "${NAMESPACE}"
  spec:
    ports:
    - name: message-buffer
      port: 9099
      protocol: TCP
      targetPort: 9099
    selector:
      app: message-buffer
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    labels:
      app: prometheus
    name: prometheus
    namespace: "${NAMESPACE}"
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: prometheus
    template:
      metadata:
        labels:
          app: prometheus
        name: prometheus
      spec:
        serviceAccountName: prometheus
        containers:
        - name: message-buffer
          image: management-infra/message-buffer
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - mountPath: /message-buffer
            name: message-buffer-data
            #TODO: add -listen-address= arg
          ports:
          - containerPort: 9099
            name: message-buf
        - name: prometheus
          image: prom/prometheus
          args:
          - -alertmanager.url=http://alertmanager:9093/
          - -storage.local.retention=6h
          - -config.file=/etc/prometheus/prometheus.yml
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 9090
            name: web
          volumeMounts:
          - mountPath: /etc/prometheus
            name: prometheus-config
          - mountPath: /prometheus
            name: prometheus-data
        - name: alertmanager
          image: quay.io/prometheus/alertmanager
          args:
          - -config.file=/etc/alertmanager/alertmanager.yaml
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 9093
            name: web
          volumeMounts:
          - mountPath: /etc/alertmanager
            name: alertmanager-config
          - mountPath: /alertmanager
            name: alertmanager-data
        restartPolicy: Always
        volumes:
        - configMap:
            defaultMode: 420
            name: prometheus
          name: prometheus-config
        - configMap:
            defaultMode: 420
            name: alertmanager
          name: alertmanager-config
        - emptyDir: {}
          name: prometheus-data
        - emptyDir: {}
          name: alertmanager-data
        - emptyDir: {}
          name: message-buffer-data #TODO: make persistent
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: alertmanager
    namespace: "${NAMESPACE}"
  data:
    alertmanager.yaml: |
      global:

      # The root route on which each incoming alert enters.
      route:
        # default route if none match
        receiver: message-buffer-wh

        # The labels by which incoming alerts are grouped together. For example,
        # multiple alerts coming in for cluster=A and alertname=LatencyHigh would
        # be batched into a single group.
        # TODO:
        group_by: []

        # All the above attributes are inherited by all child routes and can
        # overwritten on each.


      receivers:
      - name: message-buffer-wh
        webhook_config:
        - url: http://localhost:9099
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: prometheus
    namespace: "${NAMESPACE}"
  data:
    prometheus.rules: |
      ALERT Testing
        IF container_fs_usage_bytes{container_name="",instance="vm-48-45.eng.lab.tlv.redhat.com",device="/dev/mapper/vg0-lv_root"} > 4000000000
        ANNOTATIONS {
          source = "ManageIQ",
          severity = "HIGH",
          url = "https://www.youtube.com/watch?v=dQw4w9WgXcQ",
          message = "Node about to explode!",
          description = "a description"
        }
    prometheus.yml: |
      rule_files:
        - 'prometheus.rules'
      global:
        scrape_interval:     15s # By default, scrape targets every 15 seconds.

        # Attach these labels to any time series or alerts when communicating with
        # external systems (federation, remote storage, Alertmanager).
        external_labels:
          monitor: 'codelab-monitor'
        # Attach these labels to any time series or alerts when communicating with
        # external systems (federation, remote storage, Alertmanager).
        external_labels:
          monitor: 'codelab-monitor'

      # A scrape configuration containing exactly one endpoint to scrape:
      # Here it's Prometheus itself.
      scrape_configs:
        # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
        - job_name: 'kubernetes-apiserver'
          kubernetes_sd_configs:
          - role: endpoints
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https
        - job_name: 'kubernetes-nodes'
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          kubernetes_sd_configs:
          - role: node
        - job_name: 'kubernetes-service-endpoints'
          kubernetes_sd_configs:
          - role: endpoints
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    creationTimestamp: null
    labels:
      name: prometheus
    name: prometheus
  spec:
    host: metrics-vm-48-45.eng.lab.tlv.redhat.com
    port:
      targetPort: prometheus
    to:
      kind: Service
      name: prometheus
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    creationTimestamp: null
    labels:
      name: alertmanager
    name: alertmanager
  spec:
    host: alerts-vm-48-45.eng.lab.tlv.redhat.com
    port:
      targetPort: alertmanager
    to:
      kind: Service
      name: alertmanager
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    creationTimestamp: null
    labels:
      name: message-buffer
    name: message-buffer
  spec:
    host: message-buffer-vm-48-45.eng.lab.tlv.redhat.com
    port:
      targetPort: message-buf
    to:
      kind: Service
      name: message-buffer
      weight: 100
    wildcardPolicy: None
