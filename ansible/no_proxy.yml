apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: prometheus
  annotations:
    "openshift.io/display-name": Prometheus
    description: |
      A monitoring solution for an OpenShift cluster - collect and gather metrics and alerts from nodes, services, and the infrastructure.
    iconClass: icon-cogs
    tags: "monitoring,prometheus, alertmanager,time-series"
parameters:
- description: The namespace to instantiate prometheus under. Defaults to 'kube-system'.
  name: NAMESPACE
  value: kube-system
- description: The location of the proxy image
  name: IMAGE_PROXY
  value: openshift/oauth-proxy:v1.0.0
- description: The location of the prometheus image
  name: IMAGE_PROMETHEUS
  value: openshift/prometheus:v2.0.0-dev
- description: The location of the alertmanager image
  name: IMAGE_ALERTMANAGER
  # TODO: Change to official openshift build
  value: prom/alertmanager
- description: The location of message-buffer image
  name: IMAGE_MESSAGE_BUFFER
  # TODO: change to official openshift build
  value: ilackarms/message-buffer
- description: The session secret for the proxy
  name: SESSION_SECRET
  generate: expression
  from: "[a-zA-Z0-9]{43}"
objects:
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    name: alerts
    namespace: "${NAMESPACE}"
  spec:
    to:
      name: alerts
# Create a service to access alerts vi auth-proxy
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: alerts-tls
    labels:
      name: alerts
    name: alerts
    namespace: "${NAMESPACE}"
  spec:
    ports:
    - name: alerts
      port: 80
      protocol: TCP
      targetPort: 9099
    selector:
      app: alerts

- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: prometheus
    namespace: "${NAMESPACE}"
    annotations:
      serviceaccounts.openshift.io/oauth-redirectreference.primary: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"prometheus"}}'

- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    labels:
      app: alerts
    name: alerts
    namespace: "${NAMESPACE}"
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: alerts
    template:
      metadata:
        labels:
          app: alerts
        name: alerts
      spec:
        serviceAccountName: prometheus
        containers:
        - name: message-buffer
          image: ${IMAGE_MESSAGE_BUFFER}
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - mountPath: /message-buffer
            name: message-buffer-data
          ports:
          - containerPort: 9099
            name: message-buf

        restartPolicy: Always
        volumes:
        - emptyDir: {}
          name: message-buffer-data #TODO: make persistent
